[{"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\layout\\Layout.js":"1","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\layout\\Styles.js":"2","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\home\\components\\TweetList.js":"3","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\home\\components\\Tweet.js":"4","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\context\\TwittContext.js":"5","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\api\\api_tweet.js":"6","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\tweetByHashTag\\TweetByHashTag.js":"7","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\tweetsByUser\\TweetsByUser.js":"8","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\leftSidebar\\LeftSidebar.js":"9","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\App.js":"10","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\rightSidebar\\RightSidebar.js":"11","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\home\\components\\NewTweet.js":"12","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\404\\Page404.js":"13","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\home\\Style.js":"14","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\home\\Home.js":"15","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\api\\api_auth.js":"16","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\home\\components\\Search.js":"17","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\leftSidebar\\Styles.js":"18","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\header\\Style.js":"19","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\auth\\AuthPage.js":"20","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\api\\api.js":"21","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\rightSidebar\\Styles.js":"22","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\auth\\Style.js":"23","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\Theme\\index.js":"24","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\index.js":"25"},{"size":1832,"mtime":1620477179079,"results":"26","hashOfConfig":"27"},{"size":749,"mtime":1620476225515,"results":"28","hashOfConfig":"27"},{"size":237,"mtime":1609799232840,"results":"29","hashOfConfig":"27"},{"size":2906,"mtime":1620478495778,"results":"30","hashOfConfig":"27"},{"size":2728,"mtime":1620412115065,"results":"31","hashOfConfig":"27"},{"size":2413,"mtime":1620403461885,"results":"32","hashOfConfig":"27"},{"size":1261,"mtime":1620478531947,"results":"33","hashOfConfig":"27"},{"size":1510,"mtime":1620404206506,"results":"34","hashOfConfig":"27"},{"size":5706,"mtime":1620403362234,"results":"35","hashOfConfig":"27"},{"size":2290,"mtime":1620478029333,"results":"36","hashOfConfig":"27"},{"size":3130,"mtime":1620411824792,"results":"37","hashOfConfig":"27"},{"size":8351,"mtime":1620412273855,"results":"38","hashOfConfig":"27"},{"size":179,"mtime":1609597542930,"results":"39","hashOfConfig":"27"},{"size":2033,"mtime":1616923452189,"results":"40","hashOfConfig":"27"},{"size":1363,"mtime":1617381235027,"results":"41","hashOfConfig":"27"},{"size":1469,"mtime":1620476340227,"results":"42","hashOfConfig":"27"},{"size":395,"mtime":1610295838603,"results":"43","hashOfConfig":"27"},{"size":1133,"mtime":1617108956776,"results":"44","hashOfConfig":"27"},{"size":350,"mtime":1606926839546,"results":"45","hashOfConfig":"27"},{"size":5675,"mtime":1615794052085,"results":"46","hashOfConfig":"27"},{"size":641,"mtime":1615793726158,"results":"47","hashOfConfig":"27"},{"size":1030,"mtime":1617108956862,"results":"48","hashOfConfig":"27"},{"size":587,"mtime":1610486740820,"results":"49","hashOfConfig":"27"},{"size":803,"mtime":1610485964676,"results":"50","hashOfConfig":"27"},{"size":382,"mtime":1606192443896,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11kxa1r",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\layout\\Layout.js",["115"],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\layout\\Styles.js",[],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\home\\components\\TweetList.js",[],["116","117"],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\home\\components\\Tweet.js",["118","119"],"import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport useStyles from \"../Style\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Favorite as FavoriteIcon} from '@material-ui/icons';\r\nimport {likeTweet, setTweetText, useTwittDispatch} from \"../../../context/TwittContext\";\r\nimport {toast} from \"react-toastify\";\r\nimport {likeTweetRequest} from \"../../../api/api_tweet\";\r\n\r\n\r\nconst Tweet = ({data}) => {\r\n    const classes = useStyles();\r\n\r\n    //تغییر رنگ هشتگ ها\r\n    const renderTweet = (text) => {\r\n        return {__html: text.replace(/#\\S+/g, \"<a href='/tags/$&' style='color: dodgerblue'>$&</a>\")};\r\n    }\r\n\r\n    //Context:\r\n    const twittDispatch = useTwittDispatch();\r\n\r\n    const handleLike = () =>{\r\n        likeTweetRequest(data._id , (isOk , data)=>{\r\n            if (!isOk)\r\n                return toast.error(data);\r\n            likeTweet(twittDispatch , data._id);\r\n        })\r\n    };\r\n\r\n    const reTweet = () => {\r\n        setTweetText(twittDispatch, data.text);\r\n    };\r\n\r\n    const getImage = () => {\r\n        if (data.user.image)\r\n            return data.user.image;\r\n        return \"/images/add-avatar.png\"\r\n    };\r\n\r\n    return (\r\n        <div className={classes.tweetItem}>\r\n            <Grid container>\r\n                <img src={getImage()} className={classes.tweetListAvatar}/>\r\n                <Grid item container direction={'column'} style={{flex: 1, marginRight: '1rem'}}>\r\n                    <Grid item container>\r\n                        <Typography className={classes.tweetItemName}>{data.user.name}</Typography>\r\n                        <Typography className={classes.tweetItemId}>{data.user.id}</Typography>\r\n                    </Grid>\r\n                    <Typography dangerouslySetInnerHTML={renderTweet(data.text)} className={classes.tweetText}\r\n                                components={\"p\"}/>\r\n                    {\r\n                        data.image &&\r\n                        <div>\r\n                            <div style={{backgroundImage: `url(${data.image})`}} className={classes.TweetImg}/>\r\n                        </div>\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container direction={'row-reverse'} style={{marginTop: 17}} alignItems={'center'}>\r\n                <IconButton className={classes.newTweetImgBTN} onClick={reTweet}>\r\n                    <img src={'/images/retweet.png'} className={classes.newTweetImg}/>\r\n                </IconButton>\r\n                <IconButton className={classes.newTweetImgBTN} onClick={handleLike}>\r\n                    <FavoriteIcon className={classes.newTweetImg}/>\r\n                </IconButton>\r\n                <Typography className={classes.likeCount}> {data.likes} </Typography>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tweet;","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\context\\TwittContext.js",[],["120","121"],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\api\\api_tweet.js",["122"],"import { getAxiosInstanceApi, getAxiosInstanceJsonServer } from \"./api\";\r\n\r\nexport const getAllTweets = (callback) => {\r\n    getAxiosInstanceApi().post(\"getAllTweet\")\r\n        .then(response => {\r\n            const data = response.data;\r\n            callback(true, data);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            callback(false, error);\r\n        })\r\n}\r\n\r\nexport const getUser = (callback) => {\r\n    getAxiosInstanceApi().get(\"getAllUser\")\r\n        .then(response => {\r\n            const data = response.data;\r\n            callback(true, data);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            callback(false, error);\r\n        })\r\n}\r\n\r\nexport const getHashTags = (callback) => {\r\n    getAxiosInstanceApi().get(\"getAllHashTags\")\r\n        .then(response => {\r\n            const data = response.data;\r\n            callback(true, data);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            callback(false, error);\r\n        })\r\n}\r\n\r\nexport const newTweetRequest = (data, callback) => {\r\n    getAxiosInstanceApi().post(\"newTweet\", data)\r\n        .then(response => {\r\n            const data = response.data;\r\n            callback(true, data);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            callback(false, error);\r\n        });\r\n}\r\nexport const likeTweetRequest = (id, callback) => {\r\n    getAxiosInstanceApi().get(\"likeTweet/\" + id)\r\n        .then(response => {\r\n            const data = response.data;\r\n            callback(true, data);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            callback(false, error);\r\n        });\r\n}\r\n\r\nexport const getTweetsByHashtagRequest = (hashTag, callback) => {\r\n    getAxiosInstanceApi().post(\"getAllTweet\", { hashTag })\r\n        .then(response => {\r\n            const data = response.data;\r\n            callback(true, data);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            callback(false, error);\r\n        });\r\n}\r\nexport const getTweetsByUserRequest = (user, callback) => {\r\n    getAxiosInstanceApi().post(\"getAllTweet\", { user })\r\n        .then(response => {\r\n            const data = response.data;\r\n            callback(true, data);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            callback(false, error);\r\n        });\r\n}\r\n",["123","124"],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\tweetByHashTag\\TweetByHashTag.js",["125","126"],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\tweetsByUser\\TweetsByUser.js",["127","128"],"import { React, useState, useEffect } from 'react';\r\nimport useStyles from \"../home/Style\";\r\nimport Header from \"../../components/header/Header\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TweetList from \"../home/components/TweetList\";\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport { getTweetsByUserRequest } from \"../../api/api_tweet\";\r\nimport { useLocation } from \"react-router-dom\"\r\nimport { useTwittDispatch, useTwittState , setTweetList } from '../../context/TwittContext';\r\nimport { Typography } from '@material-ui/core';\r\n\r\n\r\nconst TweetsByUser = props => {\r\n    const classes = useStyles();\r\n\r\n    const { tweetList } = useTwittState();\r\n    const tweetDispatch = useTwittDispatch();\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        getTweetsByUserRequest(props.match.params.id, (isOk, data) => {\r\n            if (!isOk)\r\n                return alert(data.message);\r\n            setTweetList(tweetDispatch, data)\r\n        })\r\n    }, [location]);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Header title={props.match.params.user} icon={<FaceIcon />} />\r\n            <Divider className={classes.divider} />\r\n            {tweetList.length === 0 && <Typography style={{textAlign: 'center', backgroundColor: 'white', paddingTop: '1rem', fontSize: '24px', color: \"red\"}}>این کاربر توییتی ندارد</Typography>}\r\n            <TweetList data={tweetList} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TweetsByUser;\r\n\r\n",["129","130"],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\leftSidebar\\LeftSidebar.js",["131","132","133","134"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport useStyles from \"./Styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\r\nimport {Link} from 'react-router-dom';\r\nimport {getUser} from \"../../api/api_tweet\";\r\nimport {Menu, MenuItem} from \"@material-ui/core\";\r\nimport {toast} from \"react-toastify\";\r\nimport {uploadUserPhoto} from \"../../api/api_auth\";\r\n\r\nconst Tweeters = props => {\r\n    const classes = useStyles();\r\n\r\n    const getImage = () => {\r\n        if (props.img)\r\n            return props.img;\r\n        return \"/images/add-avatar.png\"\r\n    };\r\n\r\n    return (\r\n        <ButtonBase>\r\n            <Link to={`/users/${props._id}/${props.id}`} style={{width: '100%'}}>\r\n                <Grid container alignItems={'center'} className={classes.twitterParent}>\r\n                    <img src={getImage()} className={classes.tweetersImg}/>\r\n                    <Grid item container direction={'column'} className={classes.twittPersonName} alignItems={\"flex-start\"}>\r\n                        <Typography className={classes.profName}>{props.name}</Typography>\r\n                        <Typography className={classes.profId}>{props.id}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Link>\r\n        </ButtonBase>\r\n    )\r\n}\r\n\r\n// start Main Left_Component:\r\n\r\nconst LeftSidebar = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [tweeter, setTweeter] = useState([]);\r\n    const [anchorMenu, setAnchorMenu] = useState();\r\n    const [imageFile, setImageFile] = useState();\r\n    const [imagePath, setImagePath] = useState();\r\n\r\n    useEffect(() => {\r\n        getUser((isOk, data) => {\r\n            if (!isOk)\r\n                return alert(data.message);\r\n            //در بالا ریترن شده پس اگه ریترن بشه از تابع میاد بیرون و else بی معنیه\r\n            else setTweeter(data);\r\n        })\r\n    }, []);\r\n\r\n    const inputRef = useRef();\r\n\r\n    const handleToggleMenu = (e) => {\r\n        if (anchorMenu)\r\n            setAnchorMenu(null);\r\n        else\r\n            setAnchorMenu(e.currentTarget);\r\n    };\r\n\r\n    const handleAvatar = (e) =>{\r\n        if (e.target.files && e.target.files.length > 0)\r\n        {\r\n            setImageFile(e.target.files[0])\r\n\r\n            //Baraye neshan dadan pishnamayesh avatar da samte chap:\r\n            const reader = new FileReader();\r\n            reader.onload = (e) =>{\r\n                setImagePath(e.target.result);\r\n            }\r\n            reader.readAsDataURL(e.target.files[0])\r\n\r\n            //Upload Axe dar server:\r\n            const formData = new FormData();\r\n            formData.append(\"image\" , e.target.files[0]);\r\n\r\n            uploadUserPhoto(formData , (isOk , data)=>{\r\n                if (!isOk)\r\n                    return toast.error(data);\r\n                toast.success(\"عکس شما با موفقیت در سرور ذخیره شد\");\r\n                localStorage.setItem(\"image\" , data.imagePath)\r\n            })\r\n        }\r\n    }\r\n    const getImage = () => {\r\n        if (imagePath)\r\n            return imagePath;\r\n        if (localStorage.getItem(\"image\") && localStorage.getItem(\"image\") !== \"undefined\")\r\n            return localStorage.getItem(\"image\");\r\n        return \"/images/add-avatar.png\"\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {/*Profile Info*/}\r\n            <Grid container direction={'row-reverse'} alignItems={'center'} onClick={handleToggleMenu}\r\n                  style={{cursor: \"pointer\"}}>\r\n                <img src={getImage()} style={{width: 50, height: 50, borderRadius: \"50%\"}}/>\r\n                <Grid item container direction={'column'} className={classes.profText}>\r\n                    <Typography className={classes.profName}>{localStorage.getItem(\"name\")}</Typography>\r\n                    <Typography className={classes.profId}>{localStorage.getItem(\"username\")}</Typography>\r\n                </Grid>\r\n                <input ref={inputRef} type={\"file\"} style={{display: \"none\"}} onChange={handleAvatar}/>\r\n            </Grid>\r\n            {/*TwittPerson Info*/}\r\n            <Grid item container direction={'column'} className={classes.twittPersonList}>\r\n                <Typography className={classes.twittTitle}>\r\n                    بهترین توییت کنندگان\r\n                </Typography>\r\n                <Divider/>\r\n                {\r\n                    tweeter.map((item, index) => {\r\n                        // ** dar return paeen mige nabayad chandta element estefade koni pas bayad to <div> bezari y aaz\r\n                        // vizhegi REACT estedade koni: <React.Fragment> || <></> :\r\n                        return (\r\n                            <>\r\n                                <Tweeters name={item.name} id={item.username} img={item.image} _id={item._id}/>\r\n                                {index != tweeter.length - 1 && <Divider/>}\r\n                            </>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n            <Menu open={Boolean(anchorMenu)} onClose={() => setAnchorMenu(null)} anchorEl={anchorMenu}>\r\n                <MenuItem onClick={() => {\r\n                    inputRef.current.click();\r\n                }}>ویرایش عکس پروفایل</MenuItem>\r\n                <MenuItem onClick={() => {\r\n                    localStorage.clear();\r\n                    window.location.reload();\r\n                }}>خروج</MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LeftSidebar;","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\App.js",[],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\rightSidebar\\RightSidebar.js",["135","136","137","138","139"],"import React, { useState, useEffect } from 'react';\r\nimport useStyles from \"./Styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\r\nimport { Link } from 'react-router-dom';\r\nimport { getHashTags } from \"../../api/api_tweet\";\r\nimport { useTwittDispatch, useTwittState, setHashTagList } from '../../context/TwittContext';\r\nimport { useLocation } from \"react-router-dom\"\r\n\r\nconst RightSidebar = () => {\r\n    //************ادامه.............. */\r\n    // const onClick = () => {\r\n    //     props.history.push(props.match.params.id)\r\n    // };\r\n\r\n    const classes = useStyles();\r\n\r\n    const { hashTag: hashTags } = useTwittState();\r\n    const tweetDispatch = useTwittDispatch();\r\n\r\n    useEffect(() => {\r\n        getHashTags((isOk, data) => {\r\n            if (!isOk)\r\n                return alert(data.message);\r\n            //در بالا ریترن شده پس اگه ریترن بشه از تابع میاد بیرون و else بی معنیه\r\n            setHashTagList(tweetDispatch, data);\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {/*//گرید دو حالت بیشتر نداره: یا کانتینر و یا آیتم و بر اساس فلکس باکس سی اس اس ساخته شده:*/}\r\n            {/*//direction => row coloumn*/}\r\n            <Link to={\"/\"}>\r\n                <Grid container direction={'row'} alignItems={'center'}>\r\n                    <Grid item>\r\n                        <img src={\"/images/logo.png\"} />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography component={'h1'} className={classes.logoType}>\r\n                            توییتر پارسی\r\n            </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Link>\r\n            {/*HashTagTitle:*/}\r\n            <Typography Typography className={classes.hashTagTitle} >\r\n                هشتگ های داغ\r\n            </Typography >\r\n            {/*HashtagList:*/}\r\n            <Grid Grid container direction={\"column\"} alignItems={\"center\"} >\r\n                {\r\n                    hashTags.map(item => (\r\n                        <ButtonBase className={classes.hashTagParent}>\r\n                            <Link to={\"/hashtags/\" + item.text} style={{ width: \"100%\" }}>\r\n                                <Grid item container>\r\n                                    <img src={'/images/hashtag.png'} />\r\n                                    <Typography className={classes.hashtag}>\r\n                                        {/*باید از .text استفاده بشه چون خود item یک آبجکت از بک اند برمیگردونه*/}\r\n                                        {item.text}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Link>\r\n                        </ButtonBase>\r\n                    ))\r\n                }\r\n            </Grid >\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default RightSidebar;","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\home\\components\\NewTweet.js",["140","141","142","143","144"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport useStyles from \"../Style\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport classNames from \"classnames\"\r\nimport axios from 'axios';\r\nimport { newTweetRequest } from \"../../../api/api_tweet\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as url from \"url\";\r\nimport { useTwittDispatch, useTwittState } from \"../../../context/TwittContext\";\r\nimport { setTweetText as setTweet, updateHashTagList } from \"../../../context/TwittContext\";\r\n\r\nconst NewTweet = ({ updateTweets }) => {\r\n    /*\r\n        //Namespace management idea from http://enterprisejquery.com/2010/10/how-good-c-habits-can-encourage-bad-javascript-habits-part-1/\r\n        (function (cursorManager) {\r\n    \r\n            //From: http://www.w3.org/TR/html-markup/syntax.html#syntax-elements\r\n            var voidNodeTags = ['AREA', 'BASE', 'BR', 'COL', 'EMBED', 'HR', 'IMG', 'INPUT', 'KEYGEN', 'LINK', 'MENUITEM', 'META', 'PARAM', 'SOURCE', 'TRACK', 'WBR', 'BASEFONT', 'BGSOUND', 'FRAME', 'ISINDEX'];\r\n    \r\n            //From: https://stackoverflow.com/questions/237104/array-containsobj-in-javascript\r\n            Array.prototype.contains = function (obj) {\r\n                var i = this.length;\r\n                while (i--) {\r\n                    if (this[i] === obj) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n    \r\n            //Basic idea from: https://stackoverflow.com/questions/19790442/test-if-an-element-can-contain-text\r\n            function canContainText(node) {\r\n                if (node.nodeType == 1) { //is an element node\r\n                    return !voidNodeTags.contains(node.nodeName);\r\n                } else { //is not an element node\r\n                    return false;\r\n                }\r\n            };\r\n    \r\n            function getLastChildElement(el) {\r\n                var lc = el.lastChild;\r\n                while (lc && lc.nodeType != 1) {\r\n                    if (lc.previousSibling)\r\n                        lc = lc.previousSibling;\r\n                    else\r\n                        break;\r\n                }\r\n                return lc;\r\n            }\r\n    \r\n            //Based on Nico Burns's answer\r\n            cursorManager.setEndOfContenteditable = function (contentEditableElement) {\r\n    \r\n                while (getLastChildElement(contentEditableElement) &&\r\n                    canContainText(getLastChildElement(contentEditableElement))) {\r\n                    contentEditableElement = getLastChildElement(contentEditableElement);\r\n                }\r\n    \r\n                var range, selection;\r\n                if (document.createRange)//Firefox, Chrome, Opera, Safari, IE 9+\r\n                {\r\n                    range = document.createRange();//Create a range (a range is a like the selection but invisible)\r\n                    range.selectNodeContents(contentEditableElement);//Select the entire contents of the element with the range\r\n                    range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start\r\n                    selection = window.getSelection();//get the selection object (allows you to change selection)\r\n                    selection.removeAllRanges();//remove any selections already made\r\n                    selection.addRange(range);//make the range you have just created the visible selection\r\n                }\r\n                else if (document.selection)//IE 8 and lower\r\n                {\r\n                    range = document.body.createTextRange();//Create a range (a range is a like the selection but invisible)\r\n                    range.moveToElementText(contentEditableElement);//Select the entire contents of the element with the range\r\n                    range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start\r\n                    range.select();//Select the range (make it the visible selection\r\n                }\r\n            }\r\n    \r\n        }(window.cursorManager = window.cursorManager || {}));\r\n    */\r\n    // const renderTweet = (text) => {\r\n    //     return { __html: text.replace(/#\\S+/g, \"<span style='color: dodgerblue'>$&</span>\") };\r\n    // }\r\n    // const input = React.useRef();\r\n\r\n\r\n    const input = useRef();\r\n    const inputFile = useRef();\r\n\r\n    //Context:\r\n    const twittDispatch = useTwittDispatch();\r\n    const { twittText: tweet } = useTwittState();\r\n    // const [tweet, setTweet] = useState();\r\n    const [imageFile, setImageFile] = useState();\r\n    const [imagePath, setImagePath] = useState();\r\n\r\n    // useEffect(() => {\r\n    //         input.current.addEventListener(\"input\", function (e) {\r\n    //         console.log(\"input event fired\", e.target.innerText);\r\n    //     }, false);\r\n    // }, [])\r\n\r\n    const newTweetClick = () => {\r\n        //تکست داخل اینپوت و فرستادن آن در data \r\n        const tweetText = tweet;\r\n        //اگر خالی بود و چیزی ننوشته بود، کاری نکن\r\n        if (!tweetText)\r\n            return;\r\n\r\n        //zakhire data ha dar form data\r\n        const formData = new FormData();\r\n        formData.append(\"text\", tweetText);\r\n        if (imageFile)\r\n            formData.append(\"image\", imageFile);\r\n\r\n        //axios:\r\n        newTweetRequest(formData, (isOk, data) => {\r\n            if (!isOk)\r\n                return toast.error(data);\r\n\r\n            toast.success(\"موفقیت آمیز بود...\");\r\n            updateTweets();\r\n            setTweet(twittDispatch, \"\");\r\n            setImagePath();\r\n            setImageFile();\r\n            // input.current.innerText = \"\";\r\n            if (tweetText.includes('#'))\r\n                updateHashTagList(twittDispatch);\r\n        })\r\n    };\r\n\r\n    const getImage = () => {\r\n        if (localStorage.getItem(\"image\") && localStorage.getItem(\"image\") !== \"undefined\")\r\n            return localStorage.getItem(\"image\");\r\n        return \"/images/add-avatar.png\"\r\n    };\r\n    const selectImg = () => {\r\n        //icon upload click shod selectImg run mishe va roye inputFile click mishe:\r\n        inputFile.current.click();\r\n    };\r\n    const onChangeImg = (e) => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            setImageFile(e.target.files[0]);\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                setImagePath(e.target.result);\r\n            };\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.newTweet}>\r\n            <Grid container>\r\n                <img src={getImage()} style={{ width: 60, height: 60, borderRadius: \"50%\" }} />\r\n                <input className={classNames(classes.input, \"editable\")} data-placeholder=\"توییت وارد کن...\" ref={input}\r\n                    value={tweet} onChange={e => setTweet(twittDispatch, e.target.value)} />\r\n                {/*<div*/}\r\n                {/*    contentEditable*/}\r\n                {/*    className={classNames(classes.input, \"editable\")}*/}\r\n                {/*    data-placeholder=\"توییت وارد کن...\"*/}\r\n                {/*    ref={input}*/}\r\n                {/*// dangerouslySetInnerHTML={tweet}*/}\r\n                {/*></div>*/}\r\n                <input type={\"file\"} style={{ display: \"none\" }} ref={inputFile} onChange={onChangeImg} />\r\n            </Grid>\r\n            {\r\n                imagePath &&\r\n                <div>\r\n                    <div style={{ backgroundImage: `url(${imagePath})` }} className={classes.TweetImg} />\r\n                </div>\r\n            }\r\n            <Grid container direction={'row-reverse'} style={{ marginTop: 16 }}>\r\n                <Button variant={'contained'} color={'primary'} className={classes.newTweetBTN}\r\n                    onClick={newTweetClick}>توییت</Button>\r\n                <IconButton className={classes.newTweetImgBTN} onClick={selectImg}>\r\n                    <img src={'/images/tweetpic.png'} className={classes.newTweetImg} />\r\n                </IconButton>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewTweet;","D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\404\\Page404.js",[],["145","146"],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\home\\Style.js",[],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\home\\Home.js",["147","148","149"],"import React, {useEffect, useState} from 'react';\r\nimport Header from \"../../components/header/Header\";\r\nimport useStyles from \"./Style\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport NewTweet from \"./components/NewTweet\";\r\nimport TweetList from \"./components/TweetList\";\r\nimport {getAllTweets} from \"../../api/api_tweet\";\r\nimport Search from \"./components/Search\";\r\nimport {toast} from \"react-toastify\";\r\nimport {setTweetList, useTwittDispatch, useTwittState} from \"../../context/TwittContext\";\r\n\r\n\r\nconst Home = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const twittDispatch = useTwittDispatch();\r\n    const {tweetList : tweets} = useTwittState();\r\n    // const [tweets, setTweets] = useState([]);\r\n\r\n    useEffect(() => {\r\n        updateTweets();\r\n    }, []);\r\n\r\n    const updateTweets = () =>{\r\n        getAllTweets((isOk, data) => {\r\n            if (!isOk)\r\n                return toast.error(data.message);\r\n            setTweetList(twittDispatch , data);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Header title={\"خانه\"} icon={<HomeIcon/>}/>\r\n            <Divider className={classes.divider}/>\r\n            <NewTweet updateTweets={updateTweets}/>\r\n            <TweetList data={tweets}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;",["150","151"],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\api\\api_auth.js",[],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\home\\components\\Search.js",[],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\leftSidebar\\Styles.js",[],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\header\\Style.js",[],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\auth\\AuthPage.js",[],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\api\\api.js",[],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\rightSidebar\\Styles.js",[],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\pages\\auth\\Style.js",[],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\components\\Theme\\index.js",[],"D:\\Program\\#CODE_PROG\\×Re-React.NodeJS-TP\\~Project\\twitter\\twitter project\\src\\index.js",[],{"ruleId":"152","severity":1,"message":"153","line":31,"column":8,"nodeType":"154","endLine":31,"endColumn":10,"suggestions":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":44,"column":17,"nodeType":"162","endLine":44,"endColumn":76},{"ruleId":"160","severity":1,"message":"161","line":62,"column":21,"nodeType":"162","endLine":62,"endColumn":87},{"ruleId":"156","replacedBy":"163"},{"ruleId":"158","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":31,"nodeType":"167","messageId":"168","endLine":1,"endColumn":57},{"ruleId":"156","replacedBy":"169"},{"ruleId":"158","replacedBy":"170"},{"ruleId":"152","severity":1,"message":"171","line":26,"column":8,"nodeType":"154","endLine":26,"endColumn":18,"suggestions":"172"},{"ruleId":"160","severity":1,"message":"161","line":30,"column":62,"nodeType":"162","endLine":30,"endColumn":97},{"ruleId":"165","severity":1,"message":"173","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":25},{"ruleId":"152","severity":1,"message":"174","line":26,"column":8,"nodeType":"154","endLine":26,"endColumn":18,"suggestions":"175"},{"ruleId":"156","replacedBy":"176"},{"ruleId":"158","replacedBy":"177"},{"ruleId":"160","severity":1,"message":"161","line":26,"column":21,"nodeType":"162","endLine":26,"endColumn":76},{"ruleId":"165","severity":1,"message":"178","line":45,"column":12,"nodeType":"167","messageId":"168","endLine":45,"endColumn":21},{"ruleId":"160","severity":1,"message":"161","line":103,"column":17,"nodeType":"162","endLine":103,"endColumn":93},{"ruleId":"179","severity":1,"message":"180","line":123,"column":40,"nodeType":"181","messageId":"182","endLine":123,"endColumn":42},{"ruleId":"165","severity":1,"message":"173","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":25},{"ruleId":"165","severity":1,"message":"183","line":9,"column":10,"nodeType":"167","messageId":"168","endLine":9,"endColumn":21},{"ruleId":"152","severity":1,"message":"184","line":29,"column":8,"nodeType":"154","endLine":29,"endColumn":10,"suggestions":"185"},{"ruleId":"160","severity":1,"message":"161","line":38,"column":25,"nodeType":"162","endLine":38,"endColumn":57},{"ruleId":"160","severity":1,"message":"161","line":58,"column":37,"nodeType":"162","endLine":58,"endColumn":72},{"ruleId":"165","severity":1,"message":"186","line":1,"column":35,"nodeType":"167","messageId":"168","endLine":1,"endColumn":44},{"ruleId":"165","severity":1,"message":"187","line":7,"column":8,"nodeType":"167","messageId":"168","endLine":7,"endColumn":13},{"ruleId":"165","severity":1,"message":"188","line":10,"column":13,"nodeType":"167","messageId":"168","endLine":10,"endColumn":16},{"ruleId":"160","severity":1,"message":"161","line":158,"column":17,"nodeType":"162","endLine":158,"endColumn":96},{"ruleId":"160","severity":1,"message":"161","line":180,"column":21,"nodeType":"162","endLine":180,"endColumn":89},{"ruleId":"156","replacedBy":"189"},{"ruleId":"158","replacedBy":"190"},{"ruleId":"165","severity":1,"message":"173","line":1,"column":27,"nodeType":"167","messageId":"168","endLine":1,"endColumn":35},{"ruleId":"165","severity":1,"message":"191","line":9,"column":8,"nodeType":"167","messageId":"168","endLine":9,"endColumn":14},{"ruleId":"152","severity":1,"message":"192","line":24,"column":8,"nodeType":"154","endLine":24,"endColumn":10,"suggestions":"193"},{"ruleId":"156","replacedBy":"194"},{"ruleId":"158","replacedBy":"195"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["196"],"no-native-reassign",["197"],"no-negated-in-lhs",["198"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["197"],["198"],"no-unused-vars","'getAxiosInstanceJsonServer' is defined but never used.","Identifier","unusedVar",["197"],["198"],"React Hook useEffect has missing dependencies: 'props.match.params.hashtag' and 'tweetDispatch'. Either include them or remove the dependency array.",["199"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'props.match.params.id' and 'tweetDispatch'. Either include them or remove the dependency array.",["200"],["197"],["198"],"'imageFile' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useLocation' is defined but never used.","React Hook useEffect has a missing dependency: 'tweetDispatch'. Either include it or remove the dependency array.",["201"],"'useEffect' is defined but never used.","'axios' is defined but never used.","'url' is defined but never used.",["197"],["198"],"'Search' is defined but never used.","React Hook useEffect has a missing dependency: 'updateTweets'. Either include it or remove the dependency array.",["202"],["197"],["198"],{"desc":"203","fix":"204"},"no-global-assign","no-unsafe-negation",{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},"Update the dependencies array to be: [history]",{"range":"213","text":"214"},"Update the dependencies array to be: [location, props.match.params.hashtag, tweetDispatch]",{"range":"215","text":"216"},"Update the dependencies array to be: [location, props.match.params.id, tweetDispatch]",{"range":"217","text":"218"},"Update the dependencies array to be: [tweetDispatch]",{"range":"219","text":"220"},"Update the dependencies array to be: [updateTweets]",{"range":"221","text":"222"},[1149,1151],"[history]",[932,942],"[location, props.match.params.hashtag, tweetDispatch]",[989,999],"[location, props.match.params.id, tweetDispatch]",[1076,1078],"[tweetDispatch]",[827,829],"[updateTweets]"]